$date
	Fri Mar 07 13:10:42 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Decode_tb $end
$var wire 1 ! ResultSrcE $end
$var wire 1 " RegWriteE $end
$var wire 5 # RS2E [4:0] $end
$var wire 5 $ RS1E [4:0] $end
$var wire 5 % RDE [4:0] $end
$var wire 32 & RD2E [31:0] $end
$var wire 32 ' RD1E [31:0] $end
$var wire 32 ( PCPlus4E [31:0] $end
$var wire 32 ) PCE [31:0] $end
$var wire 1 * MemWriteE $end
$var wire 32 + ImmExtE [31:0] $end
$var wire 1 , BranchE $end
$var wire 1 - ALUSrcE $end
$var wire 3 . ALUControlE [2:0] $end
$var reg 32 / InstrD [31:0] $end
$var reg 32 0 PCD [31:0] $end
$var reg 32 1 PCPlus4D [31:0] $end
$var reg 5 2 RDW [4:0] $end
$var reg 1 3 RegWriteW $end
$var reg 32 4 ResultW [31:0] $end
$var reg 1 5 clk $end
$var reg 1 6 rst $end
$scope module Decode $end
$var wire 3 7 ALUControlE [2:0] $end
$var wire 1 - ALUSrcE $end
$var wire 1 , BranchE $end
$var wire 32 8 ImmExtE [31:0] $end
$var wire 32 9 InstrD [31:0] $end
$var wire 1 * MemWriteE $end
$var wire 32 : PCD [31:0] $end
$var wire 32 ; PCE [31:0] $end
$var wire 32 < PCPlus4D [31:0] $end
$var wire 32 = PCPlus4E [31:0] $end
$var wire 32 > RD1E [31:0] $end
$var wire 32 ? RD2E [31:0] $end
$var wire 5 @ RDE [4:0] $end
$var wire 5 A RDW [4:0] $end
$var wire 5 B RS1E [4:0] $end
$var wire 5 C RS2E [4:0] $end
$var wire 1 " RegWriteE $end
$var wire 1 3 RegWriteW $end
$var wire 1 ! ResultSrcE $end
$var wire 32 D ResultW [31:0] $end
$var wire 1 5 clk $end
$var wire 1 6 rst $end
$var wire 1 E ResultSrcD $end
$var wire 1 F RegWriteD $end
$var wire 32 G RD2D [31:0] $end
$var wire 32 H RD1D [31:0] $end
$var wire 1 I MemWriteD $end
$var wire 2 J ImmSrcD [1:0] $end
$var wire 32 K ImmExtD [31:0] $end
$var wire 1 L BranchD $end
$var wire 1 M ALUSrcD $end
$var wire 3 N ALUControlD [2:0] $end
$var reg 3 O ALUControlDReg [2:0] $end
$var reg 1 P ALUSrcDReg $end
$var reg 1 Q BranchDReg $end
$var reg 32 R ImmExtDReg [31:0] $end
$var reg 1 S MemWriteDReg $end
$var reg 32 T PCDReg [31:0] $end
$var reg 32 U PCPlus4DReg [31:0] $end
$var reg 32 V RD1DReg [31:0] $end
$var reg 32 W RD2DReg [31:0] $end
$var reg 5 X RDDReg [4:0] $end
$var reg 5 Y RS1DReg [4:0] $end
$var reg 5 Z RS2DReg [4:0] $end
$var reg 1 [ RegWriteDReg $end
$var reg 1 \ ResultSrcDReg $end
$scope module ControlUnit $end
$var wire 7 ] Op [6:0] $end
$var wire 3 ^ funct3 [2:0] $end
$var wire 7 _ funct7 [6:0] $end
$var wire 1 E ResultSrc $end
$var wire 1 F RegWrite $end
$var wire 1 I MemWrite $end
$var wire 2 ` ImmSrc [1:0] $end
$var wire 1 L Branch $end
$var wire 1 M ALUSrc $end
$var wire 2 a ALUOp [1:0] $end
$var wire 3 b ALUControl [2:0] $end
$scope module ALUDecoder $end
$var wire 3 c funct3 [2:0] $end
$var wire 7 d funct7 [6:0] $end
$var wire 7 e op [6:0] $end
$var wire 2 f ALUOp [1:0] $end
$var wire 3 g ALUControl [2:0] $end
$upscope $end
$scope module MainDecoder $end
$var wire 7 h Op [6:0] $end
$var wire 1 E ResultSrc $end
$var wire 1 F RegWrite $end
$var wire 1 I MemWrite $end
$var wire 2 i ImmSrc [1:0] $end
$var wire 1 L Branch $end
$var wire 1 M ALUSrc $end
$var wire 2 j ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module RegisterFile $end
$var wire 5 k addr1 [4:0] $end
$var wire 5 l addr2 [4:0] $end
$var wire 1 5 clk $end
$var wire 1 6 rst $end
$var wire 5 m writeAddr [4:0] $end
$var wire 32 n writeData [31:0] $end
$var wire 1 3 writeEnable $end
$var wire 32 o readData2 [31:0] $end
$var wire 32 p readData1 [31:0] $end
$var integer 32 q i [31:0] $end
$upscope $end
$scope module SignExtend $end
$var wire 32 r Imm [31:0] $end
$var wire 2 s ImmSrc [1:0] $end
$var wire 32 t ImmExt [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx t
bx s
bx r
b100000 q
b0 p
b0 o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
0\
0[
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
0S
b0 R
0Q
0P
b0 O
bx N
xM
xL
bx K
bx J
xI
b0 H
b0 G
xF
xE
bx D
b0 C
b0 B
bx A
b0 @
b0 ?
b0 >
b0 =
bx <
b0 ;
bx :
bx 9
b0 8
b0 7
06
05
bx 4
x3
bx 2
bx 1
bx 0
bx /
b0 .
0-
0,
b0 +
0*
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
0"
0!
$end
#5
15
#10
0F
0M
b0 N
b0 b
b0 g
b0 J
b0 `
b0 i
b0 s
0I
0E
0L
b0 a
b0 f
b0 j
b0 K
b0 t
b100100 ]
b100100 e
b100100 h
b10 ^
b10 c
b1010010 _
b1010010 d
b1001 k
b1010 l
b1001 H
b1001 p
b1010 G
b1010 o
05
b1 4
b1 D
b1 n
b100 2
b100 A
b100 m
b1100 1
b1100 <
b1000 0
b1000 :
b10100100101001001010010010100100 /
b10100100101001001010010010100100 9
b10100100101001001010010010100100 r
13
16
#15
b1010 #
b1010 C
b1010 Z
b1001 $
b1001 B
b1001 Y
b1100 (
b1100 =
b1100 U
b1000 )
b1000 ;
b1000 T
b1010 &
b1010 ?
b1010 W
b1001 '
b1001 >
b1001 V
15
#20
05
#25
15
#30
05
