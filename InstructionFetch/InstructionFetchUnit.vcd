$date
	Sun Mar 09 13:20:43 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module InstructionFetchUnit_tb $end
$var wire 32 ! PCPlus4D [31:0] $end
$var wire 32 " PCD [31:0] $end
$var wire 32 # InstrD [31:0] $end
$var reg 1 $ PCSrcE $end
$var reg 32 % PCTargetE [31:0] $end
$var reg 1 & clk $end
$var reg 1 ' rst $end
$scope module uut $end
$var wire 1 $ PCSrcE $end
$var wire 32 ( PCTargetE [31:0] $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 32 ) PCPlus4D [31:0] $end
$var wire 32 * PCPlus4 [31:0] $end
$var wire 32 + PCFout [31:0] $end
$var wire 32 , PCFin [31:0] $end
$var wire 32 - PCD [31:0] $end
$var wire 32 . InstrF [31:0] $end
$var wire 32 / InstrD [31:0] $end
$var reg 32 0 InstrFReg [31:0] $end
$var reg 32 1 PCFReg [31:0] $end
$var reg 32 2 PCPlus4FReg [31:0] $end
$scope module IM $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 32 3 instr [31:0] $end
$var wire 32 4 addr [31:0] $end
$upscope $end
$scope module MuxPC $end
$var wire 32 5 b [31:0] $end
$var wire 1 $ sel $end
$var wire 32 6 y [31:0] $end
$var wire 32 7 a [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 & clk $end
$var wire 32 8 count_next [31:0] $end
$var wire 1 ' rst $end
$var reg 32 9 count [31:0] $end
$upscope $end
$scope module PCAdder $end
$var wire 32 : a [31:0] $end
$var wire 32 ; b [31:0] $end
$var wire 32 < c [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx <
b100 ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
bx ,
bx +
bx *
b0 )
bx (
0'
0&
bx %
x$
b0 #
b0 "
b0 !
$end
#5
b100 *
b100 7
b100 <
b0 +
b0 4
b0 9
b0 :
1&
#10
0&
#15
1&
#20
b100 ,
b100 6
b100 8
b10100000000001010010011 .
b10100000000001010010011 3
0&
b100 %
b100 (
b100 5
0$
1'
#25
b1100000000001100010011 .
b1100000000001100010011 3
b1000 ,
b1000 6
b1000 8
b100 !
b100 )
b10100000000001010010011 #
b10100000000001010010011 /
b1000 *
b1000 7
b1000 <
b100 +
b100 4
b100 9
b100 :
b100 2
b10100000000001010010011 0
1&
#30
0&
#35
b11000101000001110110011 .
b11000101000001110110011 3
b1100 ,
b1100 6
b1100 8
b1000 !
b1000 )
b100 "
b100 -
b1100000000001100010011 #
b1100000000001100010011 /
b1100 *
b1100 7
b1100 <
b1000 +
b1000 4
b1000 9
b1000 :
b1000 2
b100 1
b1100000000001100010011 0
1&
#40
0&
#45
b10010000000011 .
b10010000000011 3
b10000 ,
b10000 6
b10000 8
b1100 !
b1100 )
b1000 "
b1000 -
b11000101000001110110011 #
b11000101000001110110011 /
b10000 *
b10000 7
b10000 <
b1100 +
b1100 4
b1100 9
b1100 :
b1100 2
b1000 1
b11000101000001110110011 0
1&
#50
b100 ,
b100 6
b100 8
0&
1$
#55
b1100000000001100010011 .
b1100000000001100010011 3
b10000 !
b10000 )
b1100 "
b1100 -
b10010000000011 #
b10010000000011 /
b1000 *
b1000 7
b1000 <
b100 +
b100 4
b100 9
b100 :
b10000 2
b1100 1
b10010000000011 0
1&
#60
b1000 ,
b1000 6
b1000 8
0&
0$
#65
b11000101000001110110011 .
b11000101000001110110011 3
b1100 ,
b1100 6
b1100 8
b1000 !
b1000 )
b100 "
b100 -
b1100000000001100010011 #
b1100000000001100010011 /
b1100 *
b1100 7
b1100 <
b1000 +
b1000 4
b1000 9
b1000 :
b1000 2
b100 1
b1100000000001100010011 0
1&
#70
0&
#75
b10010000000011 .
b10010000000011 3
b10000 ,
b10000 6
b10000 8
b1100 !
b1100 )
b1000 "
b1000 -
b11000101000001110110011 #
b11000101000001110110011 /
b10000 *
b10000 7
b10000 <
b1100 +
b1100 4
b1100 9
b1100 :
b1100 2
b1000 1
b11000101000001110110011 0
1&
#80
0&
#85
b100000000010010010011 .
b100000000010010010011 3
b10100 ,
b10100 6
b10100 8
b10000 !
b10000 )
b1100 "
b1100 -
b10010000000011 #
b10010000000011 /
b10100 *
b10100 7
b10100 <
b10000 +
b10000 4
b10000 9
b10000 :
b10000 2
b1100 1
b10010000000011 0
1&
#90
0&
#95
b100101000000010100110011 .
b100101000000010100110011 3
b11000 ,
b11000 6
b11000 8
b10100 !
b10100 )
b10000 "
b10000 -
b100000000010010010011 #
b100000000010010010011 /
b11000 *
b11000 7
b11000 <
b10100 +
b10100 4
b10100 9
b10100 :
b10100 2
b10000 1
b100000000010010010011 0
1&
#100
b0 2
b0 1
b0 0
b0 #
b0 /
b0 "
b0 -
b0 !
b0 )
b0 .
b0 3
0&
0'
