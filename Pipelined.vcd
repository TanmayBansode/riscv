$date
	Mon Mar 10 23:47:24 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Pipelined_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # WriteDataM [31:0] $end
$var wire 32 $ ResultW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 & ResultSrcM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ( RegWriteW $end
$var wire 1 ) RegWriteM $end
$var wire 1 * RegWriteE $end
$var wire 32 + ReadDataW [31:0] $end
$var wire 5 , RS2E [4:0] $end
$var wire 5 - RS1E [4:0] $end
$var wire 5 . RDW [4:0] $end
$var wire 5 / RDM [4:0] $end
$var wire 5 0 RDE [4:0] $end
$var wire 32 1 RD2E [31:0] $end
$var wire 32 2 RD1E [31:0] $end
$var wire 32 3 PCTargetE [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 5 PCPlus4W [31:0] $end
$var wire 32 6 PCPlus4M [31:0] $end
$var wire 32 7 PCPlus4E [31:0] $end
$var wire 32 8 PCPlus4D [31:0] $end
$var wire 32 9 PCE [31:0] $end
$var wire 32 : PCD [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 1 < MemWriteE $end
$var wire 1 = JumpE $end
$var wire 32 > InstrD [31:0] $end
$var wire 32 ? ImmExtE [31:0] $end
$var wire 2 @ ForwardBE [1:0] $end
$var wire 2 A ForwardAE [1:0] $end
$var wire 1 B BranchE $end
$var wire 1 C ALUSrcE $end
$var wire 32 D ALUResultW [31:0] $end
$var wire 32 E ALUResultM [31:0] $end
$var wire 3 F ALUControlE [2:0] $end
$scope module DU $end
$var wire 3 G ALUControlE [2:0] $end
$var wire 1 C ALUSrcE $end
$var wire 1 B BranchE $end
$var wire 32 H ImmExtE [31:0] $end
$var wire 1 = JumpE $end
$var wire 1 < MemWriteE $end
$var wire 32 I PCE [31:0] $end
$var wire 32 J PCPlus4E [31:0] $end
$var wire 32 K RD1E [31:0] $end
$var wire 32 L RD2E [31:0] $end
$var wire 5 M RDE [4:0] $end
$var wire 5 N RS1E [4:0] $end
$var wire 5 O RS2E [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 2 P ResultSrcE [1:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 Q ResultW [31:0] $end
$var wire 2 R ResultSrcD [1:0] $end
$var wire 1 ( RegWriteW $end
$var wire 1 S RegWriteD $end
$var wire 5 T RDW [4:0] $end
$var wire 32 U RD2D [31:0] $end
$var wire 32 V RD1D [31:0] $end
$var wire 32 W PCPlus4D [31:0] $end
$var wire 32 X PCD [31:0] $end
$var wire 1 Y MemWriteD $end
$var wire 1 Z JumpD $end
$var wire 32 [ InstrD [31:0] $end
$var wire 2 \ ImmSrcD [1:0] $end
$var wire 32 ] ImmExtD [31:0] $end
$var wire 1 ^ BranchD $end
$var wire 1 _ ALUSrcD $end
$var wire 3 ` ALUControlD [2:0] $end
$var reg 3 a ALUControlDReg [2:0] $end
$var reg 1 C ALUSrcDReg $end
$var reg 1 B BranchDReg $end
$var reg 32 b ImmExtDReg [31:0] $end
$var reg 1 = JumpDReg $end
$var reg 1 c MemWriteDReg $end
$var reg 32 d PCDReg [31:0] $end
$var reg 32 e PCPlus4DReg [31:0] $end
$var reg 32 f RD1DReg [31:0] $end
$var reg 32 g RD2DReg [31:0] $end
$var reg 5 h RDDReg [4:0] $end
$var reg 5 i RS1DReg [4:0] $end
$var reg 5 j RS2DReg [4:0] $end
$var reg 1 k RegWriteDReg $end
$var reg 2 l ResultSrcDReg [1:0] $end
$scope module ControlUnit $end
$var wire 7 m Op [6:0] $end
$var wire 3 n funct3 [2:0] $end
$var wire 7 o funct7 [6:0] $end
$var wire 2 p ResultSrc [1:0] $end
$var wire 1 S RegWrite $end
$var wire 1 Y MemWrite $end
$var wire 1 Z Jump $end
$var wire 2 q ImmSrc [1:0] $end
$var wire 1 ^ Branch $end
$var wire 1 _ ALUSrc $end
$var wire 2 r ALUOp [1:0] $end
$var wire 3 s ALUControl [2:0] $end
$scope module ALUDecoder $end
$var wire 3 t funct3 [2:0] $end
$var wire 7 u funct7 [6:0] $end
$var wire 7 v op [6:0] $end
$var wire 2 w ALUOp [1:0] $end
$var reg 4 x ALUControl [3:0] $end
$upscope $end
$scope module MainDecoder $end
$var wire 7 y Op [6:0] $end
$var wire 2 z ResultSrc [1:0] $end
$var wire 1 S RegWrite $end
$var wire 1 Y MemWrite $end
$var wire 1 Z Jump $end
$var wire 2 { ImmSrc [1:0] $end
$var wire 1 ^ Branch $end
$var wire 1 _ ALUSrc $end
$var wire 2 | ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module RegisterFile $end
$var wire 5 } addr1 [4:0] $end
$var wire 5 ~ addr2 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ( writeEnable $end
$var wire 32 !" writeData [31:0] $end
$var wire 5 "" writeAddr [4:0] $end
$var wire 32 #" readData2 [31:0] $end
$var wire 32 $" readData1 [31:0] $end
$var integer 32 %" i [31:0] $end
$upscope $end
$scope module SignExtend $end
$var wire 2 &" ImmSrc [1:0] $end
$var wire 32 '" ImmExt [31:0] $end
$var wire 32 (" Imm [31:0] $end
$upscope $end
$upscope $end
$scope module EU $end
$var wire 4 )" ALUControlE [3:0] $end
$var wire 32 *" ALUResultM [31:0] $end
$var wire 1 C ALUSrcE $end
$var wire 1 B BranchE $end
$var wire 32 +" ImmExtE [31:0] $end
$var wire 1 = JumpE $end
$var wire 1 < MemWriteE $end
$var wire 1 ; MemWriteM $end
$var wire 32 ," PCE [31:0] $end
$var wire 32 -" PCPlus4E [31:0] $end
$var wire 32 ." PCPlus4M [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 /" RD1E [31:0] $end
$var wire 32 0" RD2E [31:0] $end
$var wire 5 1" RDE [4:0] $end
$var wire 5 2" RDM [4:0] $end
$var wire 5 3" RS1E [4:0] $end
$var wire 5 4" RS2E [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ) RegWriteM $end
$var wire 2 5" ResultSrcE [1:0] $end
$var wire 2 6" ResultSrcM [1:0] $end
$var wire 32 7" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 8" ZeroE $end
$var wire 32 9" SrcBE [31:0] $end
$var wire 32 :" SrcAE [31:0] $end
$var wire 32 ;" ResultW [31:0] $end
$var wire 32 <" PCTargetE [31:0] $end
$var wire 1 =" OverflowE $end
$var wire 1 >" NegativeE $end
$var wire 32 ?" MuxBE [31:0] $end
$var wire 2 @" ForwardBE [1:0] $end
$var wire 2 A" ForwardAE [1:0] $end
$var wire 1 B" CarryE $end
$var wire 32 C" ALUResultE [31:0] $end
$var reg 32 D" ALUResultEReg [31:0] $end
$var reg 1 E" MemWriteEReg $end
$var reg 32 F" PCPlus4EReg [31:0] $end
$var reg 5 G" RDEReg [4:0] $end
$var reg 1 ) RegWriteEReg $end
$var reg 2 H" ResultSrcEReg [1:0] $end
$var reg 32 I" WriteDataEReg [31:0] $end
$scope module MuxA $end
$var wire 32 J" a [31:0] $end
$var wire 32 K" c [31:0] $end
$var wire 32 L" y [31:0] $end
$var wire 2 M" sel [1:0] $end
$var wire 32 N" b [31:0] $end
$upscope $end
$scope module MuxB $end
$var wire 32 O" a [31:0] $end
$var wire 32 P" c [31:0] $end
$var wire 32 Q" y [31:0] $end
$var wire 2 R" sel [1:0] $end
$var wire 32 S" b [31:0] $end
$upscope $end
$scope module alu $end
$var wire 4 T" ALUControl [3:0] $end
$var wire 1 =" Overflow $end
$var wire 32 U" a [31:0] $end
$var wire 32 V" sub_result [31:0] $end
$var wire 1 W" sub_carry_out $end
$var wire 32 X" b [31:0] $end
$var wire 32 Y" add_result [31:0] $end
$var wire 1 Z" add_carry_out $end
$var wire 1 8" Zero $end
$var wire 1 >" Negative $end
$var wire 1 B" Carry $end
$var reg 32 [" result [31:0] $end
$upscope $end
$scope module branchadder $end
$var wire 32 \" a [31:0] $end
$var wire 32 ]" b [31:0] $end
$var wire 32 ^" c [31:0] $end
$upscope $end
$scope module mux $end
$var wire 32 _" a [31:0] $end
$var wire 32 `" b [31:0] $end
$var wire 1 C sel $end
$var wire 32 a" y [31:0] $end
$upscope $end
$upscope $end
$scope module HU $end
$var wire 5 b" RDM [4:0] $end
$var wire 5 c" RS1E [4:0] $end
$var wire 5 d" RS2E [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 " rst $end
$var wire 1 ( RegWriteW $end
$var wire 5 e" RDW [4:0] $end
$var wire 2 f" ForwardBE [1:0] $end
$var wire 2 g" ForwardAE [1:0] $end
$upscope $end
$scope module IFU $end
$var wire 1 4 PCSrcE $end
$var wire 32 h" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 i" PCPlus4D [31:0] $end
$var wire 32 j" PCPlus4 [31:0] $end
$var wire 32 k" PCFout [31:0] $end
$var wire 32 l" PCFin [31:0] $end
$var wire 32 m" PCD [31:0] $end
$var wire 32 n" InstrF [31:0] $end
$var wire 32 o" InstrD [31:0] $end
$var reg 32 p" InstrFReg [31:0] $end
$var reg 32 q" PCFReg [31:0] $end
$var reg 32 r" PCPlus4FReg [31:0] $end
$scope module IM $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 s" instr [31:0] $end
$var wire 32 t" addr [31:0] $end
$upscope $end
$scope module MuxPC $end
$var wire 32 u" b [31:0] $end
$var wire 1 4 sel $end
$var wire 32 v" y [31:0] $end
$var wire 32 w" a [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 32 x" count_next [31:0] $end
$var wire 1 " rst $end
$var reg 32 y" count [31:0] $end
$upscope $end
$scope module PCAdder $end
$var wire 32 z" a [31:0] $end
$var wire 32 {" b [31:0] $end
$var wire 32 |" c [31:0] $end
$upscope $end
$upscope $end
$scope module MU $end
$var wire 32 }" ALUResultM [31:0] $end
$var wire 32 ~" ALUResultW [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 32 !# PCPlus4M [31:0] $end
$var wire 32 "# PCPlus4W [31:0] $end
$var wire 5 ## RDM [4:0] $end
$var wire 5 $# RDW [4:0] $end
$var wire 32 %# ReadDataW [31:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 ( RegWriteW $end
$var wire 2 &# ResultSrcM [1:0] $end
$var wire 2 '# ResultSrcW [1:0] $end
$var wire 32 (# WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 )# ReadDataM [31:0] $end
$var reg 32 *# ALUResultMReg [31:0] $end
$var reg 32 +# PCPlus4MReg [31:0] $end
$var reg 5 ,# RDMReg [4:0] $end
$var reg 32 -# ReadDataMReg [31:0] $end
$var reg 1 ( RegWriteMReg $end
$var reg 2 .# ResultSrcMReg [1:0] $end
$scope module dataMemory $end
$var wire 32 /# address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 0# writeData [31:0] $end
$var wire 1 ; writeEnable $end
$var wire 32 1# readData [31:0] $end
$upscope $end
$upscope $end
$scope module WBU $end
$var wire 32 2# ALUResultW [31:0] $end
$var wire 32 3# PCPlus4W [31:0] $end
$var wire 32 4# ReadDataW [31:0] $end
$var wire 2 5# ResultSrcW [1:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 6# ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 7# a [31:0] $end
$var wire 32 8# b [31:0] $end
$var wire 32 9# c [31:0] $end
$var wire 2 :# sel [1:0] $end
$var wire 32 ;# y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
bx |"
b100 {"
bx z"
bx y"
bx x"
bx w"
bx v"
b0 u"
bx t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
bx l"
bx k"
bx j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
0Z"
b0 Y"
b0 X"
0W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
0E"
b0 D"
b0 C"
0B"
b0 A"
b0 @"
b0 ?"
0>"
0="
b0 <"
b0 ;"
b0 :"
b0 9"
18"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b100000 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
0k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
0c
b0 b
b0 a
b0 `
0_
0^
b0 ]
b0 \
b0 [
0Z
0Y
b0 X
b0 W
b0 V
b0 U
b0 T
0S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
0C
0B
b0 A
b0 @
b0 ?
b0 >
0=
0<
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
0(
0'
0&
0%
b0 $
b0 #
0"
0!
$end
#5
b100 l"
b100 v"
b100 x"
b100 j"
b100 w"
b100 |"
b0 k"
b0 t"
b0 y"
b0 z"
1!
#10
0!
#15
1!
#20
b10100000000001010010011 )#
b10100000000001010010011 1#
b10100000000001010010011 n"
b10100000000001010010011 s"
0!
1"
#25
b101 ]
b101 '"
b1 \
b1 q
b1 {
b1 &"
1S
1_
b11 r
b11 w
b11 |
b1100000000001100010011 n"
b1100000000001100010011 s"
b101 ~
b10011 m
b10011 v
b10011 y
b1000 l"
b1000 v"
b1000 x"
b100 8
b100 W
b100 i"
b10100000000001010010011 >
b10100000000001010010011 [
b10100000000001010010011 ("
b10100000000001010010011 o"
b1000 j"
b1000 w"
b1000 |"
b100 k"
b100 t"
b100 y"
b100 z"
b10100000000001010010011 +
b10100000000001010010011 %#
b10100000000001010010011 -#
b10100000000001010010011 4#
b10100000000001010010011 8#
b100 r"
b10100000000001010010011 p"
1!
#30
0!
#35
b11 ]
b11 '"
b11111111111111111111111111111011 V"
1W"
08"
b101 C"
b101 ["
b101 Y"
b10100110000001110110011 n"
b10100110000001110110011 s"
b11 ~
b101 9"
b101 X"
b101 a"
b1100 l"
b1100 v"
b1100 x"
b1000 8
b1000 W
b1000 i"
b100 :
b100 X
b100 m"
b1100000000001100010011 >
b1100000000001100010011 [
b1100000000001100010011 ("
b1100000000001100010011 o"
b1100 j"
b1100 w"
b1100 |"
b1000 k"
b1000 t"
b1000 y"
b1000 z"
b1000 r"
b100 q"
b1100000000001100010011 p"
b101 0
b101 M
b101 1"
b101 h
b101 ,
b101 O
b101 j
b101 4"
b101 d"
b100 7
b100 J
b100 -"
b100 e
b101 3
b101 <"
b101 ^"
b101 h"
b101 u"
b101 ?
b101 H
b101 b
b101 +"
b101 ]"
b101 `"
1C
1*
1k
1!
#40
0!
#45
b10100110000 ]
b10100110000 '"
b0 \
b0 q
b0 {
b0 &"
1S
0_
b11111111111111111111111111111101 V"
b11 C"
b11 ["
b10 r
b10 w
b10 |
b10010000000011 n"
b10010000000011 s"
b11 Y"
b101 ~
b110 }
b110011 m
b110011 v
b110011 y
b10000 l"
b10000 v"
b10000 x"
b100101000000010100110011 )#
b100101000000010100110011 1#
b11 9"
b11 X"
b11 a"
b1100 8
b1100 W
b1100 i"
b1000 :
b1000 X
b1000 m"
b10100110000001110110011 >
b10100110000001110110011 [
b10100110000001110110011 ("
b10100110000001110110011 o"
b10000 j"
b10000 w"
b10000 |"
b1100 k"
b1100 t"
b1100 y"
b1100 z"
b100 6
b100 ."
b100 !#
b100 F"
b101 /
b101 2"
b101 G"
b101 b"
b101 ##
b101 E
b101 *"
b101 D"
b101 K"
b101 P"
b101 }"
b101 /#
1)
b110 0
b110 M
b110 1"
b110 h
b11 ,
b11 O
b11 j
b11 4"
b11 d"
b1000 7
b1000 J
b1000 -"
b1000 e
b100 9
b100 I
b100 d
b100 ,"
b100 \"
b111 3
b111 <"
b111 ^"
b111 h"
b111 u"
b11 ?
b11 H
b11 b
b11 +"
b11 ]"
b11 `"
b1100 r"
b1000 q"
b10100110000001110110011 p"
1!
#50
0!
#55
b0 ]
b0 '"
b1 \
b1 q
b1 {
b1 &"
1_
b101 :"
b101 L"
b101 U"
b0 `
b0 s
b0 r
b0 w
b0 |
b11 ?"
b11 Q"
b11 _"
b1 A
b1 A"
b1 M"
b1 g"
b0 x
b1 R
b1 p
b1 z
b10 @
b10 @"
b10 R"
b10 f"
b10 V"
0W"
08"
b1000 C"
b1000 ["
b100000000010010010011 n"
b100000000010010010011 s"
b0 ~
b0 }
b10 n
b10 t
b11 m
b11 v
b11 y
b1000 Y"
b10100 l"
b10100 v"
b10100 x"
b10000 8
b10000 W
b10000 i"
b1100 :
b1100 X
b1100 m"
b10010000000011 >
b10010000000011 [
b10010000000011 ("
b10010000000011 o"
b11 9"
b11 X"
b11 a"
b10010000000011 )#
b10010000000011 1#
b101 $
b101 Q
b101 !"
b101 ;"
b101 N"
b101 S"
b101 6#
b101 ;#
b10100 j"
b10100 w"
b10100 |"
b10000 k"
b10000 t"
b10000 y"
b10000 z"
b10000 r"
b1100 q"
b10010000000011 p"
b111 0
b111 M
b111 1"
b111 h
b101 ,
b101 O
b101 j
b101 4"
b101 d"
b110 -
b110 N
b110 i
b110 3"
b110 c"
b1100 7
b1100 J
b1100 -"
b1100 e
b1000 9
b1000 I
b1000 d
b1000 ,"
b1000 \"
b10100111000 3
b10100111000 <"
b10100111000 ^"
b10100111000 h"
b10100111000 u"
b10100110000 ?
b10100110000 H
b10100110000 b
b10100110000 +"
b10100110000 ]"
b10100110000 `"
0C
b1000 6
b1000 ."
b1000 !#
b1000 F"
b110 /
b110 2"
b110 G"
b110 b"
b110 ##
b11 E
b11 *"
b11 D"
b11 K"
b11 P"
b11 }"
b11 /#
b100101000000010100110011 +
b100101000000010100110011 %#
b100101000000010100110011 -#
b100101000000010100110011 4#
b100101000000010100110011 8#
b101 D
b101 ~"
b101 *#
b101 2#
b101 7#
b100 5
b100 "#
b100 +#
b100 3#
b100 9#
b101 .
b101 T
b101 ""
b101 e"
b101 $#
b101 ,#
1(
1!
#60
0!
#65
18"
b1 ]
b1 '"
b0 A
b0 A"
b0 M"
b0 g"
b0 V"
b0 C"
b0 ["
b0 :"
b0 L"
b0 U"
b0 @
b0 @"
b0 R"
b0 f"
b0 Y"
b0 R
b0 p
b0 z
b11 r
b11 w
b11 |
b100001001000010100110011 n"
b100001001000010100110011 s"
b0 ?"
b0 Q"
b0 _"
b0 9"
b0 X"
b0 a"
b1 ~
b0 n
b0 t
b10011 m
b10011 v
b10011 y
b11000 l"
b11000 v"
b11000 x"
b11 $
b11 Q
b11 !"
b11 ;"
b11 N"
b11 S"
b11 6#
b11 ;#
bx )#
bx 1#
b1 5"
1'
b10100 8
b10100 W
b10100 i"
b10000 :
b10000 X
b10000 m"
b100000000010010010011 >
b100000000010010010011 [
b100000000010010010011 ("
b100000000010010010011 o"
b11000 j"
b11000 w"
b11000 |"
b10100 k"
b10100 t"
b10100 y"
b10100 z"
b10010000000011 +
b10010000000011 %#
b10010000000011 -#
b10010000000011 4#
b10010000000011 8#
b11 D
b11 ~"
b11 *#
b11 2#
b11 7#
b1000 5
b1000 "#
b1000 +#
b1000 3#
b1000 9#
b110 .
b110 T
b110 ""
b110 e"
b110 $#
b110 ,#
b1100 6
b1100 ."
b1100 !#
b1100 F"
b111 /
b111 2"
b111 G"
b111 b"
b111 ##
b11 #
b11 7"
b11 (#
b11 0#
b11 I"
b1000 E
b1000 *"
b1000 D"
b1000 K"
b1000 P"
b1000 }"
b1000 /#
b1000 0
b1000 M
b1000 1"
b1000 h
b0 ,
b0 O
b0 j
b0 4"
b0 d"
b0 -
b0 N
b0 i
b0 3"
b0 c"
b10000 7
b10000 J
b10000 -"
b10000 e
b1100 9
b1100 I
b1100 d
b1100 ,"
b1100 \"
b1100 3
b1100 <"
b1100 ^"
b1100 h"
b1100 u"
b0 ?
b0 H
b0 b
b0 +"
b0 ]"
b0 `"
b1 P
b1 l
1C
b10100 r"
b10000 q"
b100000000010010010011 p"
1!
#70
0!
#75
b100001001000 ]
b100001001000 '"
b0 \
b0 q
b0 {
b0 &"
1S
0_
b10 r
b10 w
b10 |
b11111111111111111111111111111111 V"
1W"
08"
b1 C"
b1 ["
bx n"
bx s"
b1000 ~
b1001 }
b110011 m
b110011 v
b110011 y
b1 Y"
b11100 l"
b11100 v"
b11100 x"
b11000 8
b11000 W
b11000 i"
b10100 :
b10100 X
b10100 m"
b100001001000010100110011 >
b100001001000010100110011 [
b100001001000010100110011 ("
b100001001000010100110011 o"
b1 9"
b1 X"
b1 a"
b0 5"
0'
b10100000000001010010011 )#
b10100000000001010010011 1#
b1 &#
1&
b1000 $
b1000 Q
b1000 !"
b1000 ;"
b1000 N"
b1000 S"
b1000 6#
b1000 ;#
b11100 j"
b11100 w"
b11100 |"
b11000 k"
b11000 t"
b11000 y"
b11000 z"
b11000 r"
b10100 q"
b100001001000010100110011 p"
b1001 0
b1001 M
b1001 1"
b1001 h
b1 ,
b1 O
b1 j
b1 4"
b1 d"
b10100 7
b10100 J
b10100 -"
b10100 e
b10000 9
b10000 I
b10000 d
b10000 ,"
b10000 \"
b10001 3
b10001 <"
b10001 ^"
b10001 h"
b10001 u"
b1 ?
b1 H
b1 b
b1 +"
b1 ]"
b1 `"
b0 P
b0 l
b10000 6
b10000 ."
b10000 !#
b10000 F"
b1000 /
b1000 2"
b1000 G"
b1000 b"
b1000 ##
b0 #
b0 7"
b0 (#
b0 0#
b0 I"
b0 E
b0 *"
b0 D"
b0 K"
b0 P"
b0 }"
b0 /#
b1 6"
b1 H"
bx +
bx %#
bx -#
bx 4#
bx 8#
b1000 D
b1000 ~"
b1000 *#
b1000 2#
b1000 7#
b1100 5
b1100 "#
b1100 +#
b1100 3#
b1100 9#
b111 .
b111 T
b111 ""
b111 e"
b111 $#
b111 ,#
1!
#80
0!
#85
b10100000000001010010011 :"
b10100000000001010010011 L"
b10100000000001010010011 U"
xS
bx ]
bx '"
b1 ?"
b1 Q"
b1 _"
b1 A
b1 A"
b1 M"
b1 g"
x_
xZ
b10 @
b10 @"
b10 R"
b10 f"
b10100000000001010010010 V"
0W"
08"
b10100000000001010010100 C"
b10100000000001010010100 ["
bx U
bx #"
bx V
bx $"
bx \
bx q
bx {
bx &"
xY
b0x R
b0x p
b0x z
x^
bx r
bx w
bx |
b10100000000001010010100 Y"
bx ~
bx }
bx o
bx u
bx n
bx t
bx m
bx v
bx y
b100000 l"
b100000 v"
b100000 x"
b10100000000001010010011 $
b10100000000001010010011 Q
b10100000000001010010011 !"
b10100000000001010010011 ;"
b10100000000001010010011 N"
b10100000000001010010011 S"
b10100000000001010010011 6#
b10100000000001010010011 ;#
b1 5#
b1 :#
1%
b1100000000001100010011 )#
b1100000000001100010011 1#
b0 &#
0&
b1 9"
b1 X"
b1 a"
b11100 8
b11100 W
b11100 i"
b11000 :
b11000 X
b11000 m"
bx >
bx [
bx ("
bx o"
b100000 j"
b100000 w"
b100000 |"
b11100 k"
b11100 t"
b11100 y"
b11100 z"
b10100000000001010010011 +
b10100000000001010010011 %#
b10100000000001010010011 -#
b10100000000001010010011 4#
b10100000000001010010011 8#
b0 D
b0 ~"
b0 *#
b0 2#
b0 7#
b10000 5
b10000 "#
b10000 +#
b10000 3#
b10000 9#
b1000 .
b1000 T
b1000 ""
b1000 e"
b1000 $#
b1000 ,#
b1 '#
b1 .#
b10100 6
b10100 ."
b10100 !#
b10100 F"
b1001 /
b1001 2"
b1001 G"
b1001 b"
b1001 ##
b1 E
b1 *"
b1 D"
b1 K"
b1 P"
b1 }"
b1 /#
b0 6"
b0 H"
b1010 0
b1010 M
b1010 1"
b1010 h
b1000 ,
b1000 O
b1000 j
b1000 4"
b1000 d"
b1001 -
b1001 N
b1001 i
b1001 3"
b1001 c"
b11000 7
b11000 J
b11000 -"
b11000 e
b10100 9
b10100 I
b10100 d
b10100 ,"
b10100 \"
b100001011100 3
b100001011100 <"
b100001011100 ^"
b100001011100 h"
b100001011100 u"
b100001001000 ?
b100001001000 H
b100001001000 b
b100001001000 +"
b100001001000 ]"
b100001001000 `"
0C
b11100 r"
b11000 q"
bx p"
1!
#90
0!
#95
x="
x>"
bx V"
xW"
x8"
bx C"
bx ["
xB"
bx :"
bx L"
bx U"
bx Y"
xZ"
bx @
bx @"
bx R"
bx f"
bx A
bx A"
bx M"
bx g"
bx 9"
bx X"
bx a"
bx ?"
bx Q"
bx _"
b1 $
b1 Q
b1 !"
b1 ;"
b1 N"
b1 S"
b1 6#
b1 ;#
bx l"
bx v"
bx x"
b100000 8
b100000 W
b100000 i"
b11100 :
b11100 X
b11100 m"
x4
b0x 5"
x'
bx )#
bx 1#
b0 5#
b0 :#
0%
b100100 j"
b100100 w"
b100100 |"
b100000 k"
b100000 t"
b100000 y"
b100000 z"
b100000 r"
b11100 q"
bx 0
bx M
bx 1"
bx h
bx ,
bx O
bx j
bx 4"
bx d"
bx -
bx N
bx i
bx 3"
bx c"
b11100 7
b11100 J
b11100 -"
b11100 e
b11000 9
b11000 I
b11000 d
b11000 ,"
b11000 \"
bx 3
bx <"
bx ^"
bx h"
bx u"
bx ?
bx H
bx b
bx +"
bx ]"
bx `"
bx 1
bx L
bx g
bx 0"
bx O"
bx 2
bx K
bx f
bx /"
bx J"
x=
xB
b0x P
b0x l
x<
xc
xC
x*
xk
b11000 6
b11000 ."
b11000 !#
b11000 F"
b1010 /
b1010 2"
b1010 G"
b1010 b"
b1010 ##
b1 #
b1 7"
b1 (#
b1 0#
b1 I"
b10100000000001010010100 E
b10100000000001010010100 *"
b10100000000001010010100 D"
b10100000000001010010100 K"
b10100000000001010010100 P"
b10100000000001010010100 }"
b10100000000001010010100 /#
b1100000000001100010011 +
b1100000000001100010011 %#
b1100000000001100010011 -#
b1100000000001100010011 4#
b1100000000001100010011 8#
b1 D
b1 ~"
b1 *#
b1 2#
b1 7#
b10100 5
b10100 "#
b10100 +#
b10100 3#
b10100 9#
b1001 .
b1001 T
b1001 ""
b1001 e"
b1001 $#
b1001 ,#
b0 '#
b0 .#
1!
#100
0!
#105
b10100000000001010010100 $
b10100000000001010010100 Q
b10100000000001010010100 !"
b10100000000001010010100 ;"
b10100000000001010010100 N"
b10100000000001010010100 S"
b10100000000001010010100 6#
b10100000000001010010100 ;#
b0x &#
x&
b100100 8
b100100 W
b100100 i"
b100000 :
b100000 X
b100000 m"
bx j"
bx w"
bx |"
bx k"
bx t"
bx y"
bx z"
bx +
bx %#
bx -#
bx 4#
bx 8#
b10100000000001010010100 D
b10100000000001010010100 ~"
b10100000000001010010100 *#
b10100000000001010010100 2#
b10100000000001010010100 7#
b11000 5
b11000 "#
b11000 +#
b11000 3#
b11000 9#
b1010 .
b1010 T
b1010 ""
b1010 e"
b1010 $#
b1010 ,#
b11100 6
b11100 ."
b11100 !#
b11100 F"
bx /
bx 2"
bx G"
bx b"
bx ##
bx #
bx 7"
bx (#
bx 0#
bx I"
bx E
bx *"
bx D"
bx K"
bx P"
bx }"
bx /#
x;
xE"
b0x 6"
b0x H"
x)
b100000 7
b100000 J
b100000 -"
b100000 e
b11100 9
b11100 I
b11100 d
b11100 ,"
b11100 \"
b100100 r"
b100000 q"
1!
#110
0!
#115
bx 8
bx W
bx i"
bx :
bx X
bx m"
bx $
bx Q
bx !"
bx ;"
bx N"
bx S"
bx 6#
bx ;#
b0x 5#
b0x :#
x%
bx r"
bx q"
b100100 7
b100100 J
b100100 -"
b100100 e
b100000 9
b100000 I
b100000 d
b100000 ,"
b100000 \"
b100000 6
b100000 ."
b100000 !#
b100000 F"
bx D
bx ~"
bx *#
bx 2#
bx 7#
b11100 5
b11100 "#
b11100 +#
b11100 3#
b11100 9#
bx .
bx T
bx ""
bx e"
bx $#
bx ,#
b0x '#
b0x .#
x(
1!
#120
0!
#125
b100000 5
b100000 "#
b100000 +#
b100000 3#
b100000 9#
b100100 6
b100100 ."
b100100 !#
b100100 F"
bx 7
bx J
bx -"
bx e
bx 9
bx I
bx d
bx ,"
bx \"
1!
#130
0!
#135
bx 6
bx ."
bx !#
bx F"
b100100 5
b100100 "#
b100100 +#
b100100 3#
b100100 9#
1!
#140
0!
#145
bx 5
bx "#
bx +#
bx 3#
bx 9#
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
