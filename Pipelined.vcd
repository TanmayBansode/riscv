$date
	Mon Mar 10 12:38:43 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Pipelined_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # WriteDataM [31:0] $end
$var wire 32 $ ResultW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 & ResultSrcM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ( RegWriteW $end
$var wire 1 ) RegWriteM $end
$var wire 1 * RegWriteE $end
$var wire 32 + ReadDataW [31:0] $end
$var wire 5 , RS2E [4:0] $end
$var wire 5 - RS1E [4:0] $end
$var wire 5 . RDW [4:0] $end
$var wire 5 / RDM [4:0] $end
$var wire 5 0 RDE [4:0] $end
$var wire 32 1 RD2E [31:0] $end
$var wire 32 2 RD1E [31:0] $end
$var wire 32 3 PCTargetE [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 5 PCPlus4W [31:0] $end
$var wire 32 6 PCPlus4M [31:0] $end
$var wire 32 7 PCPlus4E [31:0] $end
$var wire 32 8 PCPlus4D [31:0] $end
$var wire 32 9 PCE [31:0] $end
$var wire 32 : PCD [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 1 < MemWriteE $end
$var wire 32 = InstrD [31:0] $end
$var wire 32 > ImmExtE [31:0] $end
$var wire 1 ? BranchE $end
$var wire 1 @ ALUSrcE $end
$var wire 32 A ALUResultW [31:0] $end
$var wire 32 B ALUResultM [31:0] $end
$var wire 3 C ALUControlE [2:0] $end
$scope module DU $end
$var wire 3 D ALUControlE [2:0] $end
$var wire 1 @ ALUSrcE $end
$var wire 1 ? BranchE $end
$var wire 32 E ImmExtE [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 32 F PCE [31:0] $end
$var wire 32 G PCPlus4E [31:0] $end
$var wire 32 H RD1E [31:0] $end
$var wire 32 I RD2E [31:0] $end
$var wire 5 J RDE [4:0] $end
$var wire 5 K RS1E [4:0] $end
$var wire 5 L RS2E [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 M ResultW [31:0] $end
$var wire 1 N ResultSrcD $end
$var wire 1 ( RegWriteW $end
$var wire 1 O RegWriteD $end
$var wire 5 P RDW [4:0] $end
$var wire 32 Q RD2D [31:0] $end
$var wire 32 R RD1D [31:0] $end
$var wire 32 S PCPlus4D [31:0] $end
$var wire 32 T PCD [31:0] $end
$var wire 1 U MemWriteD $end
$var wire 32 V InstrD [31:0] $end
$var wire 2 W ImmSrcD [1:0] $end
$var wire 32 X ImmExtD [31:0] $end
$var wire 1 Y BranchD $end
$var wire 1 Z ALUSrcD $end
$var wire 3 [ ALUControlD [2:0] $end
$var reg 3 \ ALUControlDReg [2:0] $end
$var reg 1 @ ALUSrcDReg $end
$var reg 1 ? BranchDReg $end
$var reg 32 ] ImmExtDReg [31:0] $end
$var reg 1 ^ MemWriteDReg $end
$var reg 32 _ PCDReg [31:0] $end
$var reg 32 ` PCPlus4DReg [31:0] $end
$var reg 32 a RD1DReg [31:0] $end
$var reg 32 b RD2DReg [31:0] $end
$var reg 5 c RDDReg [4:0] $end
$var reg 5 d RS1DReg [4:0] $end
$var reg 5 e RS2DReg [4:0] $end
$var reg 1 f RegWriteDReg $end
$var reg 1 g ResultSrcDReg $end
$scope module ControlUnit $end
$var wire 7 h Op [6:0] $end
$var wire 3 i funct3 [2:0] $end
$var wire 7 j funct7 [6:0] $end
$var wire 1 N ResultSrc $end
$var wire 1 O RegWrite $end
$var wire 1 U MemWrite $end
$var wire 2 k ImmSrc [1:0] $end
$var wire 1 Y Branch $end
$var wire 1 Z ALUSrc $end
$var wire 2 l ALUOp [1:0] $end
$var wire 3 m ALUControl [2:0] $end
$scope module ALUDecoder $end
$var wire 3 n funct3 [2:0] $end
$var wire 7 o funct7 [6:0] $end
$var wire 7 p op [6:0] $end
$var wire 2 q ALUOp [1:0] $end
$var wire 3 r ALUControl [2:0] $end
$upscope $end
$scope module MainDecoder $end
$var wire 7 s Op [6:0] $end
$var wire 1 N ResultSrc $end
$var wire 1 O RegWrite $end
$var wire 1 U MemWrite $end
$var wire 2 t ImmSrc [1:0] $end
$var wire 1 Y Branch $end
$var wire 1 Z ALUSrc $end
$var wire 2 u ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module RegisterFile $end
$var wire 5 v addr1 [4:0] $end
$var wire 5 w addr2 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ( writeEnable $end
$var wire 32 x writeData [31:0] $end
$var wire 5 y writeAddr [4:0] $end
$var wire 32 z readData2 [31:0] $end
$var wire 32 { readData1 [31:0] $end
$var integer 32 | i [31:0] $end
$upscope $end
$scope module SignExtend $end
$var wire 2 } ImmSrc [1:0] $end
$var wire 32 ~ ImmExt [31:0] $end
$var wire 32 !" Imm [31:0] $end
$upscope $end
$upscope $end
$scope module EU $end
$var wire 3 "" ALUControlE [2:0] $end
$var wire 32 #" ALUResultM [31:0] $end
$var wire 1 @ ALUSrcE $end
$var wire 1 ? BranchE $end
$var wire 32 $" ImmExtE [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 1 ; MemWriteM $end
$var wire 32 %" PCE [31:0] $end
$var wire 32 &" PCPlus4E [31:0] $end
$var wire 32 '" PCPlus4M [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 (" RD1E [31:0] $end
$var wire 32 )" RD2E [31:0] $end
$var wire 5 *" RDE [4:0] $end
$var wire 5 +" RDM [4:0] $end
$var wire 5 ," RS1E [4:0] $end
$var wire 5 -" RS2E [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ) RegWriteM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 & ResultSrcM $end
$var wire 32 ." WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 /" ZeroE $end
$var wire 32 0" SrcBE [31:0] $end
$var wire 32 1" PCTargetE [31:0] $end
$var wire 1 2" OverflowE $end
$var wire 1 3" NegativeE $end
$var wire 1 4" CarryE $end
$var wire 32 5" ALUResultE [31:0] $end
$var reg 32 6" ALUResultEReg [31:0] $end
$var reg 1 7" MemWriteEReg $end
$var reg 32 8" PCPlus4EReg [31:0] $end
$var reg 5 9" RDEReg [4:0] $end
$var reg 1 :" RegWriteEReg $end
$var reg 1 ;" ResultSrcEReg $end
$var reg 32 <" WriteDataEReg [31:0] $end
$scope module alu $end
$var wire 3 =" ALUControl [2:0] $end
$var wire 1 2" Overflow $end
$var wire 32 >" a [31:0] $end
$var wire 32 ?" sub_result [31:0] $end
$var wire 1 @" sub_carry_out $end
$var wire 32 A" b [31:0] $end
$var wire 32 B" add_result [31:0] $end
$var wire 1 C" add_carry_out $end
$var wire 1 /" Zero $end
$var wire 1 3" Negative $end
$var wire 1 4" Carry $end
$var reg 32 D" result [31:0] $end
$upscope $end
$scope module branchadder $end
$var wire 32 E" a [31:0] $end
$var wire 32 F" b [31:0] $end
$var wire 32 G" c [31:0] $end
$upscope $end
$scope module mux $end
$var wire 32 H" a [31:0] $end
$var wire 32 I" b [31:0] $end
$var wire 1 @ sel $end
$var wire 32 J" y [31:0] $end
$upscope $end
$upscope $end
$scope module IFU $end
$var wire 1 4 PCSrcE $end
$var wire 32 K" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 L" PCPlus4D [31:0] $end
$var wire 32 M" PCPlus4 [31:0] $end
$var wire 32 N" PCFout [31:0] $end
$var wire 32 O" PCFin [31:0] $end
$var wire 32 P" PCD [31:0] $end
$var wire 32 Q" InstrF [31:0] $end
$var wire 32 R" InstrD [31:0] $end
$var reg 32 S" InstrFReg [31:0] $end
$var reg 32 T" PCFReg [31:0] $end
$var reg 32 U" PCPlus4FReg [31:0] $end
$scope module IM $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 V" instr [31:0] $end
$var wire 32 W" addr [31:0] $end
$upscope $end
$scope module MuxPC $end
$var wire 32 X" b [31:0] $end
$var wire 1 4 sel $end
$var wire 32 Y" y [31:0] $end
$var wire 32 Z" a [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 32 [" count_next [31:0] $end
$var wire 1 " rst $end
$var reg 32 \" count [31:0] $end
$upscope $end
$scope module PCAdder $end
$var wire 32 ]" a [31:0] $end
$var wire 32 ^" b [31:0] $end
$var wire 32 _" c [31:0] $end
$upscope $end
$upscope $end
$scope module MU $end
$var wire 32 `" ALUResultM [31:0] $end
$var wire 32 a" ALUResultW [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 32 b" PCPlus4M [31:0] $end
$var wire 32 c" PCPlus4W [31:0] $end
$var wire 5 d" RDM [4:0] $end
$var wire 5 e" RDW [4:0] $end
$var wire 32 f" ReadDataW [31:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 ( RegWriteW $end
$var wire 1 & ResultSrcM $end
$var wire 1 % ResultSrcW $end
$var wire 32 g" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 h" ReadDataM [31:0] $end
$var reg 32 i" ALUResultMReg [31:0] $end
$var reg 32 j" PCPlus4MReg [31:0] $end
$var reg 5 k" RDMReg [4:0] $end
$var reg 32 l" ReadDataMReg [31:0] $end
$var reg 1 m" RegWriteMReg $end
$var reg 1 % ResultSrcMReg $end
$scope module dataMemory $end
$var wire 32 n" address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 o" writeData [31:0] $end
$var wire 1 ; writeEnable $end
$var wire 32 p" readData [31:0] $end
$upscope $end
$upscope $end
$scope module WBU $end
$var wire 32 q" ALUResultW [31:0] $end
$var wire 32 r" PCPlus4W [31:0] $end
$var wire 32 s" ReadDataW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 t" ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 u" a [31:0] $end
$var wire 32 v" b [31:0] $end
$var wire 1 % sel $end
$var wire 32 w" y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
0m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
bx _"
b100 ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
b0 X"
bx W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
bx O"
bx N"
bx M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
0C"
b0 B"
b0 A"
0@"
b0 ?"
b0 >"
b0 ="
b0 <"
0;"
0:"
b0 9"
b0 8"
07"
b0 6"
b0 5"
04"
03"
02"
b0 1"
b0 0"
1/"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b100000 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
0g
0f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
0^
b0 ]
b0 \
b0 [
0Z
0Y
b0 X
b0 W
b0 V
0U
b0 T
b0 S
b0 R
b0 Q
b0 P
0O
0N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
0@
0?
b0 >
b0 =
0<
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
0(
0'
0&
0%
b0 $
b0 #
0"
0!
$end
#5
b100 O"
b100 Y"
b100 ["
b100 M"
b100 Z"
b100 _"
b0 N"
b0 W"
b0 \"
b0 ]"
1!
#10
0!
#15
1!
#20
b10100000000001010010011 h"
b10100000000001010010011 p"
b1000001000001010110011 Q"
b1000001000001010110011 V"
0!
1"
#25
1O
b10 Q
b10 z
b1 R
b1 {
b10 l
b10 q
b10 u
b1000100010000110000011 Q"
b1000100010000110000011 V"
b10 w
b1 v
b110011 h
b110011 p
b110011 s
b1000 O"
b1000 Y"
b1000 ["
b100 8
b100 S
b100 L"
b1000001000001010110011 =
b1000001000001010110011 V
b1000001000001010110011 !"
b1000001000001010110011 R"
b1000 M"
b1000 Z"
b1000 _"
b100 N"
b100 W"
b100 \"
b100 ]"
b10100000000001010010011 +
b10100000000001010010011 f"
b10100000000001010010011 l"
b10100000000001010010011 s"
b10100000000001010010011 v"
b100 U"
b1000001000001010110011 S"
1!
#30
0!
#35
1Z
b10 X
b10 ~
b100 R
b100 {
b1 W
b1 k
b1 t
b1 }
1N
b0 l
b0 q
b0 u
1@"
b0 Q"
b0 V"
b100 v
b10 i
b10 n
b11 h
b11 p
b11 s
b1100 O"
b1100 Y"
b1100 ["
b1000 8
b1000 S
b1000 L"
b100 :
b100 T
b100 P"
b1000100010000110000011 =
b1000100010000110000011 V
b1000100010000110000011 !"
b1000100010000110000011 R"
b10 0"
b10 A"
b10 J"
0/"
b11 5"
b11 D"
b11 B"
b11111111111111111111111111111111 ?"
b1100 M"
b1100 Z"
b1100 _"
b1000 N"
b1000 W"
b1000 \"
b1000 ]"
b1000 U"
b100 T"
b1000100010000110000011 S"
b101 0
b101 J
b101 *"
b101 c
b10 ,
b10 L
b10 -"
b10 e
b1 -
b1 K
b1 ,"
b1 d
b100 7
b100 G
b100 &"
b100 `
b10 1
b10 I
b10 b
b10 )"
b10 H"
b1 2
b1 H
b1 a
b1 ("
b1 >"
1*
1f
1!
#40
0!
#45
0O
0Z
b0 X
b0 ~
b0 Q
b0 z
b0 R
b0 {
b0 W
b0 k
b0 t
b0 }
0N
b0 w
b0 v
b0 i
b0 n
b0 h
b0 p
b0 s
b10000 O"
b10000 Y"
b10000 ["
b10010000000011 h"
b10010000000011 p"
b110 5"
b110 D"
b110 B"
b10 ?"
0@"
b1100 8
b1100 S
b1100 L"
b1000 :
b1000 T
b1000 P"
b0 =
b0 V
b0 !"
b0 R"
b10000 M"
b10000 Z"
b10000 _"
b1100 N"
b1100 W"
b1100 \"
b1100 ]"
b100 6
b100 '"
b100 b"
b100 8"
b101 /
b101 +"
b101 d"
b101 9"
b10 #
b10 ."
b10 g"
b10 o"
b10 <"
b11 B
b11 #"
b11 6"
b11 `"
b11 n"
1)
1:"
b11 0
b11 J
b11 *"
b11 c
b100 -
b100 K
b100 ,"
b100 d
b1000 7
b1000 G
b1000 &"
b1000 `
b100 9
b100 F
b100 _
b100 %"
b100 E"
b110 3
b110 1"
b110 G"
b110 K"
b110 X"
b10 >
b10 E
b10 ]
b10 $"
b10 F"
b10 I"
b100 2
b100 H
b100 a
b100 ("
b100 >"
1'
1g
1@
b1100 U"
b1000 T"
b0 S"
1!
#50
0!
#55
1/"
b10100 O"
b10100 Y"
b10100 ["
b10000 8
b10000 S
b10000 L"
b1100 :
b1100 T
b1100 P"
b0 0"
b0 A"
b0 J"
b0 5"
b0 D"
b0 B"
b0 ?"
0@"
b100111000101000000001 h"
b100111000101000000001 p"
b11 $
b11 M
b11 x
b11 t"
b11 w"
b10100 M"
b10100 Z"
b10100 _"
b10000 N"
b10000 W"
b10000 \"
b10000 ]"
b10000 U"
b1100 T"
b0 0
b0 J
b0 *"
b0 c
b0 ,
b0 L
b0 -"
b0 e
b0 -
b0 K
b0 ,"
b0 d
b1100 7
b1100 G
b1100 &"
b1100 `
b1000 9
b1000 F
b1000 _
b1000 %"
b1000 E"
b1000 3
b1000 1"
b1000 G"
b1000 K"
b1000 X"
b0 >
b0 E
b0 ]
b0 $"
b0 F"
b0 I"
b0 1
b0 I
b0 b
b0 )"
b0 H"
b0 2
b0 H
b0 a
b0 ("
b0 >"
0'
0g
0@
0*
0f
b1000 6
b1000 '"
b1000 b"
b1000 8"
b11 /
b11 +"
b11 d"
b11 9"
b110 B
b110 #"
b110 6"
b110 `"
b110 n"
1&
1;"
b10010000000011 +
b10010000000011 f"
b10010000000011 l"
b10010000000011 s"
b10010000000011 v"
b11 A
b11 a"
b11 i"
b11 q"
b11 u"
b100 5
b100 c"
b100 r"
b100 j"
b101 .
b101 P
b101 y
b101 e"
b101 k"
1(
1m"
1!
#60
0!
#65
b10100001000001010110011 Q"
b10100001000001010110011 V"
b11000 O"
b11000 Y"
b11000 ["
b100111000101000000001 $
b100111000101000000001 M
b100111000101000000001 x
b100111000101000000001 t"
b100111000101000000001 w"
b10100000000001010010011 h"
b10100000000001010010011 p"
b10100 8
b10100 S
b10100 L"
b10000 :
b10000 T
b10000 P"
b11000 M"
b11000 Z"
b11000 _"
b10100 N"
b10100 W"
b10100 \"
b10100 ]"
b100111000101000000001 +
b100111000101000000001 f"
b100111000101000000001 l"
b100111000101000000001 s"
b100111000101000000001 v"
b110 A
b110 a"
b110 i"
b110 q"
b110 u"
b1000 5
b1000 c"
b1000 r"
b1000 j"
b11 .
b11 P
b11 y
b11 e"
b11 k"
1%
b1100 6
b1100 '"
b1100 b"
b1100 8"
b0 /
b0 +"
b0 d"
b0 9"
b0 #
b0 ."
b0 g"
b0 o"
b0 <"
b0 B
b0 #"
b0 6"
b0 `"
b0 n"
0&
0;"
0)
0:"
b10000 7
b10000 G
b10000 &"
b10000 `
b1100 3
b1100 1"
b1100 G"
b1100 K"
b1100 X"
b1100 9
b1100 F
b1100 _
b1100 %"
b1100 E"
b10100 U"
b10000 T"
1!
#70
0!
#75
1O
b11 Q
b11 z
b1 R
b1 {
b10 l
b10 q
b10 u
bx Q"
bx V"
b101 w
b1 v
b110011 h
b110011 p
b110011 s
b11100 O"
b11100 Y"
b11100 ["
b11000 8
b11000 S
b11000 L"
b10100 :
b10100 T
b10100 P"
b10100001000001010110011 =
b10100001000001010110011 V
b10100001000001010110011 !"
b10100001000001010110011 R"
b0 $
b0 M
b0 x
b0 t"
b0 w"
b11100 M"
b11100 Z"
b11100 _"
b11000 N"
b11000 W"
b11000 \"
b11000 ]"
b11000 U"
b10100 T"
b10100001000001010110011 S"
b10100 7
b10100 G
b10100 &"
b10100 `
b10000 3
b10000 1"
b10000 G"
b10000 K"
b10000 X"
b10000 9
b10000 F
b10000 _
b10000 %"
b10000 E"
b10000 6
b10000 '"
b10000 b"
b10000 8"
b10100000000001010010011 +
b10100000000001010010011 f"
b10100000000001010010011 l"
b10100000000001010010011 s"
b10100000000001010010011 v"
b0 A
b0 a"
b0 i"
b0 q"
b0 u"
b1100 5
b1100 c"
b1100 r"
b1100 j"
b0 .
b0 P
b0 y
b0 e"
b0 k"
0%
0(
0m"
1!
#80
0!
#85
xO
bx [
bx m
bx r
bx X
bx ~
xZ
1@"
bx Q
bx z
bx R
bx {
bx W
bx k
bx t
bx }
xU
xN
xY
bx l
bx q
bx u
bx w
bx v
bx j
bx o
bx i
bx n
bx h
bx p
bx s
b100000 O"
b100000 Y"
b100000 ["
b11 0"
b11 A"
b11 J"
0/"
b100 5"
b100 D"
b100 B"
b11111111111111111111111111111110 ?"
b11100 8
b11100 S
b11100 L"
b11000 :
b11000 T
b11000 P"
bx =
bx V
bx !"
bx R"
b100000 M"
b100000 Z"
b100000 _"
b11100 N"
b11100 W"
b11100 \"
b11100 ]"
b10000 5
b10000 c"
b10000 r"
b10000 j"
b10100 6
b10100 '"
b10100 b"
b10100 8"
b101 0
b101 J
b101 *"
b101 c
b101 ,
b101 L
b101 -"
b101 e
b1 -
b1 K
b1 ,"
b1 d
b11000 7
b11000 G
b11000 &"
b11000 `
b10100 3
b10100 1"
b10100 G"
b10100 K"
b10100 X"
b10100 9
b10100 F
b10100 _
b10100 %"
b10100 E"
b11 1
b11 I
b11 b
b11 )"
b11 H"
b1 2
b1 H
b1 a
b1 ("
b1 >"
1*
1f
b11100 U"
b11000 T"
bx S"
1!
#90
0!
#95
x2"
x4"
x4
bx O"
bx Y"
bx ["
b100000 8
b100000 S
b100000 L"
b11100 :
b11100 T
b11100 P"
bx 0"
bx A"
bx J"
bx B"
xC"
bx ?"
x@"
1/"
b0 5"
b0 D"
b100000000010010010011 h"
b100000000010010010011 p"
b100100 M"
b100100 Z"
b100100 _"
b100000 N"
b100000 W"
b100000 \"
b100000 ]"
b100000 U"
b11100 T"
bx 0
bx J
bx *"
bx c
bx ,
bx L
bx -"
bx e
bx -
bx K
bx ,"
bx d
b11100 7
b11100 G
b11100 &"
b11100 `
b11000 9
b11000 F
b11000 _
b11000 %"
b11000 E"
bx 3
bx 1"
bx G"
bx K"
bx X"
bx >
bx E
bx ]
bx $"
bx F"
bx I"
bx 1
bx I
bx b
bx )"
bx H"
bx 2
bx H
bx a
bx ("
bx >"
bx C
bx D
bx \
bx ""
bx ="
x?
x'
xg
x<
x^
x@
x*
xf
b11000 6
b11000 '"
b11000 b"
b11000 8"
b101 /
b101 +"
b101 d"
b101 9"
b11 #
b11 ."
b11 g"
b11 o"
b11 <"
b100 B
b100 #"
b100 6"
b100 `"
b100 n"
1)
1:"
b10100 5
b10100 c"
b10100 r"
b10100 j"
1!
#100
0!
#105
b100 $
b100 M
b100 x
b100 t"
b100 w"
b10100000000001010010011 h"
b10100000000001010010011 p"
b100100 8
b100100 S
b100100 L"
b100000 :
b100000 T
b100000 P"
bx M"
bx Z"
bx _"
bx N"
bx W"
bx \"
bx ]"
b100000000010010010011 +
b100000000010010010011 f"
b100000000010010010011 l"
b100000000010010010011 s"
b100000000010010010011 v"
b100 A
b100 a"
b100 i"
b100 q"
b100 u"
b11000 5
b11000 c"
b11000 r"
b11000 j"
b101 .
b101 P
b101 y
b101 e"
b101 k"
1(
1m"
b11100 6
b11100 '"
b11100 b"
b11100 8"
bx /
bx +"
bx d"
bx 9"
bx #
bx ."
bx g"
bx o"
bx <"
b0 B
b0 #"
b0 6"
b0 `"
b0 n"
x;
x7"
x&
x;"
x)
x:"
b100000 7
b100000 G
b100000 &"
b100000 `
b11100 9
b11100 F
b11100 _
b11100 %"
b11100 E"
b100100 U"
b100000 T"
1!
#110
0!
#115
bx 8
bx S
bx L"
bx :
bx T
bx P"
b0x0x0000000000x0x00x00xx $
b0x0x0000000000x0x00x00xx M
b0x0x0000000000x0x00x00xx x
b0x0x0000000000x0x00x00xx t"
b0x0x0000000000x0x00x00xx w"
bx U"
bx T"
b100100 7
b100100 G
b100100 &"
b100100 `
b100000 9
b100000 F
b100000 _
b100000 %"
b100000 E"
b100000 6
b100000 '"
b100000 b"
b100000 8"
b10100000000001010010011 +
b10100000000001010010011 f"
b10100000000001010010011 l"
b10100000000001010010011 s"
b10100000000001010010011 v"
b0 A
b0 a"
b0 i"
b0 q"
b0 u"
b11100 5
b11100 c"
b11100 r"
b11100 j"
bx .
bx P
bx y
bx e"
bx k"
x%
x(
xm"
1!
#120
0!
#125
b100000 5
b100000 c"
b100000 r"
b100000 j"
b100100 6
b100100 '"
b100100 b"
b100100 8"
bx 7
bx G
bx &"
bx `
bx 9
bx F
bx _
bx %"
bx E"
1!
#130
0!
#135
bx 6
bx '"
bx b"
bx 8"
b100100 5
b100100 c"
b100100 r"
b100100 j"
1!
#140
0!
#145
bx 5
bx c"
bx r"
bx j"
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
