$date
	Tue Jan 28 22:56:27 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ALU_tb $end
$var wire 32 ! result [31:0] $end
$var wire 1 " Zero $end
$var wire 1 # Overflow $end
$var wire 1 $ Negative $end
$var wire 1 % Carry $end
$var reg 3 & ALUControl [2:0] $end
$var reg 32 ' a [31:0] $end
$var reg 32 ( b [31:0] $end
$scope module dut $end
$var wire 3 ) ALUControl [2:0] $end
$var wire 1 # Overflow $end
$var wire 32 * a [31:0] $end
$var wire 32 + b [31:0] $end
$var wire 32 , sub_result [31:0] $end
$var wire 1 - sub_carry_out $end
$var wire 32 . add_result [31:0] $end
$var wire 1 / add_carry_out $end
$var wire 1 " Zero $end
$var wire 1 $ Negative $end
$var wire 1 % Carry $end
$var reg 32 0 result [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b11001 0
0/
b11001 .
0-
b101 ,
b1010 +
b1111 *
b0 )
b1010 (
b1111 '
b0 &
0%
0$
0#
0"
b11001 !
$end
#10
0#
1%
1"
b0 !
b0 0
b0 .
1/
b11111111111111111111111111111110 ,
b1 (
b1 +
b11111111111111111111111111111111 '
b11111111111111111111111111111111 *
#20
0"
b10100 !
b10100 0
b1010000 .
0/
b10100 ,
b1 &
b1 )
b11110 (
b11110 +
b110010 '
b110010 *
#30
0%
1$
b11111111111111111111111111100010 !
b11111111111111111111111111100010 0
b1000110 .
b11111111111111111111111111100010 ,
1-
b110010 (
b110010 +
b10100 '
b10100 *
#40
1%
1"
0$
b0 !
b0 0
b11001000 .
b0 ,
0-
b1100100 (
b1100100 +
b1100100 '
b1100100 *
#50
0%
1$
0"
b11110000111100001111000011110000 !
b11110000111100001111000011110000 0
b1111000011110000111100001111 .
b1111000011110000111100001111 ,
b10 &
b10 )
b0 (
b0 +
b1111000011110000111100001111 '
b1111000011110000111100001111 *
#60
0$
b101000 !
b101000 0
b1000 .
b10 ,
b11 &
b11 )
b11 (
b11 +
b101 '
b101 *
#70
b10000 !
b10000 0
b1000010 .
b111110 ,
b100 &
b100 )
b10 (
b10 +
b1000000 '
b1000000 *
#80
1$
b11111111111111111111111111110000 !
b11111111111111111111111111110000 0
b11111111111111111111111111000010 .
b11111111111111111111111110111110 ,
b11111111111111111111111111000000 '
b11111111111111111111111111000000 *
#90
0$
1"
b0 !
b0 0
b11111111111111111111111111111111 .
b11100001111000011110000111100001 ,
b101 &
b101 )
b1111000011110000111100001111 (
b1111000011110000111100001111 +
b11110000111100001111000011110000 '
b11110000111100001111000011110000 *
#100
1$
0"
b11111111111111111111111111111111 !
b11111111111111111111111111111111 0
b1010101010101001010101010101011 ,
b110 &
b110 )
b1010101010101011010101010101010 (
b1010101010101011010101010101010 +
b10101010101010100101010101010101 '
b10101010101010100101010101010101 *
#110
0$
b1 !
b1 0
b11110 .
b11111111111111111111111111110110 ,
1-
b111 &
b111 )
b10100 (
b10100 +
b1010 '
b1010 *
#120
1"
b0 !
b0 0
b110010 .
b1010 ,
0-
b11110 '
b11110 *
#130
b0 ,
b11001 (
b11001 +
b11001 '
b11001 *
#140
b0 .
b0 ,
0-
b0 &
b0 )
b0 (
b0 +
b0 '
b0 *
#150
1#
1$
0"
b11111111111111111111111111111110 !
b11111111111111111111111111111110 0
b11111111111111111111111111111110 .
b0 ,
b1111111111111111111111111111111 (
b1111111111111111111111111111111 +
b1111111111111111111111111111111 '
b1111111111111111111111111111111 *
#160
b1111111111111111111111111111110 ,
b10000000000000000000000000000000 !
b10000000000000000000000000000000 0
b10000000000000000000000000000000 .
b1 (
b1 +
#170
0#
1-
1$
0%
1/
b10000000000000000000000000000001 !
b10000000000000000000000000000001 0
b1111111111111111111111111111111 .
b10000000000000000000000000000001 ,
b1 &
b1 )
b11111111111111111111111111111111 (
b11111111111111111111111111111111 +
b10000000000000000000000000000000 '
b10000000000000000000000000000000 *
#180
0/
b11111111111111111111111111111111 !
b11111111111111111111111111111111 0
b11111111111111111111111111111111 .
b11111111111111111111111111111111 ,
0-
b0 &
b0 )
b0 (
b0 +
b11111111111111111111111111111111 '
b11111111111111111111111111111111 *
#190
